function R = get_ballistic_trajectory(Fsopr, alpha, beta, phi, X_0, Y_0, Z_0, V_0, t, lat, h)
    sys.Fsopr       = Fsopr;
    sys.g           = getG(lat, h);
    sys.alpha       = deg2rad(alpha);
    sys.beta        = deg2rad(beta);
    sys.phi         = deg2rad(phi);
    
    R_0             = [X_0; Y_0; V_0 * cos(sys.alpha) * cos(sys.phi); Z_0; V_0 * sin(sys.alpha)];
    
    R               = am_ode_runge_kutta_classical(@my_dx, t, R_0, sys);
    R([3, 5], :)    = [];

    function Y = am_ode_runge_kutta_classical(f, t, y_0, sys)
        n           = length(t);
        Y           = zeros(length(y_0), n);
        Y(:, 1)     = y_0;
    
        c           = [0; 1/2; 1/2; 1];
        a           = [0, 0, 0, 0; ...
                            1/2, 0, 0, 0; ...
                            0, 1/2, 0, 0; ...
                            0, 0, 1, 0];
        b           = [1/6, 1/3, 1/3, 1/6];
    
        for k = 2 : 1 : n
            t_k1        = t(k-1);
            y_k1        = Y(:, k-1);
            
            h           = t(k) - t_k1;
            
            k1          = f(t_k1 + c(1) * h, ...
                                y_k1, ...
                                sys);
            k2          = f(t_k1 + c(2) * h, ...
                                y_k1 + h * (a(2, 1) * k1), ...
                                sys);
            k3          = f(t_k1 + c(3) * h, ...
                                y_k1 + h * (a(3, 1) * k1 + a(3, 2) * k2), ...
                                sys);
            k4          = f(t_k1 + c(4) * h, ...
                                y_k1 + h * (a(4, 1) * k1 + a(4, 2) * k2 + a(4, 3) * k3), ...
                                sys);
    
            y_k         = y_k1 + h * (b(1) * k1 + b(2) * k2 + b(3) * k3 + b(4) * k4);
            
            Y(:, k)     = y_k;
        end  
    end  
    
    function dx = my_dx(t, x, sys)
        dx      = zeros(5, 1);
        dx(1)   = x(3) * sin(sys.phi); % x
        dx(2)   = x(3) * cos(sys.phi); % y
        dx(3)   = ( - sys.Fsopr * cos(sys.beta) ) * cos(sys.phi) * cos(sys.alpha); % Vy
        dx(4)   = x(5); % z
        dx(5)   = ( - sys.Fsopr * sin(sys.beta) - sys.g ) * sin(sys.alpha); % Vz
    end

    function g = getG(lat, h)
        lat = deg2rad(lat);
        g   = 9.780318 * (1.0 + 0.005302 * sin(lat)^2 - 0.000006 * sin(2 * lat)^2) - 0.000003086 * h;
    end
end
